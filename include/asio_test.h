#ifndef ASIO_TEST_H
#define ASIO_TEST_H

#include <iostream>
// #include <boost/asio.hpp>
// #include <boost/array.hpp>

/*
Networking notes:
 - To implement multiplayer we have options:
    > Peer to peer
    > Server(Hosted)-Client
    > Server(Dedicated)-Client

Peer to peer
 - Due to neutral third party information (enemies, score) it may be hard to synchronise 

Hosted - Client
 - Has a host that holds and generates most of the information, and a dependent client that just
    renders and sends inputs back to the server 
 - Information generated by the server:
 > Enemies
 > Host player information
    > Location
    > Status
    > Attacks and dependent projectiles/entities

 - Information generated by the client
 > Client player information
    > Location
    > Status (alternatively handled by the server)
    > Attacks and dependent projectiles/entities
 > Client player required information
    > Enemy information and status

Essentially, for the current setup, it would require:
 - A separate player entity for each player
 - A vector to hold all the players

 - A separate attack deque for each player
 - A vector to hold all attack deques

TODO: 
 - Enable looping of projectiles and player characters for rendering of multiple players
 - Simulate network information inflow through local multiplayer
 - Convert information source to proper network endpoints
*/

#endif